import React, { useEffect, useState } from 'react';
import { Link } from 'react-router-dom';
import usePromoCode from '../../../hooks/usePromoCode';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { faPlus, faEye, faEdit, faTrash, faSpinner } from '@fortawesome/free-solid-svg-icons';
import CreatePromoCodeModal from '../../../Components/Modals/CreatePromoCodeModal';

const PromoCode = () => {
Â  // Utilisation du hook pour accÃ©der aux fonctions du contexte
Â  const { listAllPromoCodes, deletePromoCode } = usePromoCode();
Â  
Â  // Ã‰tats pour stocker les donnÃ©es et l'Ã©tat de chargement
Â  const [promoCodes, setPromoCodes] = useState([]);
Â  const [loading, setLoading] = useState(true);
Â  const [error, setError] = useState(null);
Â  
Â  // Ã‰tats pour la modale de crÃ©ation
Â  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);
Â  
Â  // Ã‰tats pour la pagination
Â  const [currentPage, setCurrentPage] = useState(1);
Â  const [totalPages, setTotalPages] = useState(1);
Â  const [totalCount, setTotalCount] = useState(0);

Â  // Fonction pour charger les donnÃ©es des codes promo
Â  const fetchPromoCodes = async (page) => {
Â  Â  setLoading(true);
Â  Â  setError(null);
Â  Â  try {
Â  Â  Â  const data = await listAllPromoCodes(page);
Â  Â  Â  setPromoCodes(data.items);
Â  Â  Â  setTotalPages(Math.ceil(data.totalCount / 10)); // Supposons 10 items par page
Â  Â  Â  setTotalCount(data.totalCount);
Â  Â  } catch (err) {
Â  Â  Â  setError("Impossible de charger les codes promotionnels.");
Â  Â  } finally {
Â  Â  Â  setLoading(false);
Â  Â  }
Â  };

Â  // Chargement initial et re-chargement lors du changement de page
Â  useEffect(() => {
Â  Â  fetchPromoCodes(currentPage);
Â  }, [currentPage]);

Â  // Fonctions de gestion de la modale de crÃ©ation
Â  const openCreateModal = () => setIsCreateModalOpen(true);
Â  const closeCreateModal = () => {
Â  Â  setIsCreateModalOpen(false);
Â  Â  fetchPromoCodes(currentPage); // RafraÃ®chit la liste aprÃ¨s la crÃ©ation
Â  };

Â  // ðŸ†• Gestion de la suppression sans modale de confirmation
Â  const handleDelete = async (id) => {
Â  Â  try {
Â  Â  Â  await deletePromoCode(id);
Â  Â  Â  fetchPromoCodes(currentPage); // Recharger les donnÃ©es
Â  Â  } catch (err) {
Â  Â  Â  setError("Ã‰chec de la suppression du code.");
Â  Â  }
Â  };
Â  
Â  if (loading) {
Â  Â  return <div className="p-4 text-center"><FontAwesomeIcon icon={faSpinner} spin className="mr-2"/> Chargement des codes promotionnels...</div>;
Â  }

Â  if (error) {
Â  Â  return <div className="p-4 text-center text-red-600">Erreur : {error}</div>;
Â  }

Â  return (
Â  Â  <div className="p-4">
Â  Â  Â  {/* Titre et bouton d'ajout */}
Â  Â  Â  <div className="flex justify-between items-center mb-6">
Â  Â  Â  Â  <h1 className="text-2xl font-bold">Gestion des Codes Promotionnels</h1>
Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  onClick={openCreateModal}
Â  Â  Â  Â  Â  className="bg-blue-600 text-white py-2 px-4 rounded-lg flex items-center gap-2"
Â  Â  Â  Â  >
Â  Â  Â  Â  Â  <FontAwesomeIcon icon={faPlus} />
Â  Â  Â  Â  Â  CrÃ©er un code promo
Â  Â  Â  Â  </button>
Â  Â  Â  </div>

Â  Â  Â  {/* Tableau des codes promo */}
Â  Â  Â  <div className="overflow-x-auto bg-white dark:bg-gray-800 rounded-lg shadow">
Â  Â  Â  Â  <table className="min-w-full leading-normal">
Â  Â  Â  Â  Â  <thead>
Â  Â  Â  Â  Â  Â  <tr className="bg-gray-200 dark:bg-gray-700">
Â  Â  Â  Â  Â  Â  Â  <th className="px-5 py-3 border-b-2 border-gray-300 dark:border-gray-600 text-left text-xs font-semibold uppercase tracking-wider">Nom</th>
Â  Â  Â  Â  Â  Â  Â  <th className="px-5 py-3 border-b-2 border-gray-300 dark:border-gray-600 text-left text-xs font-semibold uppercase tracking-wider">RÃ©duction</th>
Â  Â  Â  Â  Â  Â  Â  <th className="px-5 py-3 border-b-2 border-gray-300 dark:border-gray-600 text-left text-xs font-semibold uppercase tracking-wider">DisponibilitÃ©</th>
Â  Â  Â  Â  Â  Â  Â  <th className="px-5 py-3 border-b-2 border-gray-300 dark:border-gray-600 text-left text-xs font-semibold uppercase tracking-wider">Expiration</th>
Â  Â  Â  Â  Â  Â  Â  <th className="px-5 py-3 border-b-2 border-gray-300 dark:border-gray-600 text-right text-xs font-semibold uppercase tracking-wider">Actions</th>
Â  Â  Â  Â  Â  Â  </tr>
Â  Â  Â  Â  Â  </thead>
Â  Â  Â  Â  Â  <tbody>
Â  Â  Â  Â  Â  Â  {promoCodes.map((code) => (
Â  Â  Â  Â  Â  Â  Â  <tr key={code.id} className="hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors duration-200">
Â  Â  Â  Â  Â  Â  Â  Â  <td className="px-5 py-5 border-b border-gray-200 dark:border-gray-700 text-sm">{code.name}</td>
Â  Â  Â  Â  Â  Â  Â  Â  <td className="px-5 py-5 border-b border-gray-200 dark:border-gray-700 text-sm">{code.reductionPercent}%</td>
Â  Â  Â  Â  Â  Â  Â  Â  <td className="px-5 py-5 border-b border-gray-200 dark:border-gray-700 text-sm">{code.availability}</td>
Â  Â  Â  Â  Â  Â  Â  Â  <td className="px-5 py-5 border-b border-gray-200 dark:border-gray-700 text-sm">
Â  Â  Â  Â  Â  Â  Â  Â  Â  {new Date(code.expiredAt).toLocaleDateString()}
Â  Â  Â  Â  Â  Â  Â  Â  </td>
Â  Â  Â  Â  Â  Â  Â  Â  <td className="px-5 py-5 border-b border-gray-200 dark:border-gray-700 text-sm text-right">
Â  Â  Â  Â  Â  Â  Â  Â  Â  <Link to={`/admin/promocodes/details/${code.id}`} className="text-blue-600 hover:text-blue-800 mr-3">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <FontAwesomeIcon icon={faEye} />
Â  Â  Â  Â  Â  Â  Â  Â  Â  </Link>
Â  Â  Â  Â  Â  Â  Â  Â  Â  <Link to={`/admin/promocodes/details/${code.id}`} className="text-green-600 hover:text-green-800 mr-3">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <FontAwesomeIcon icon={faEdit} />
Â  Â  Â  Â  Â  Â  Â  Â  Â  </Link>
Â  Â  Â  Â  Â  Â  Â  Â  Â  <button onClick={() => handleDelete(code.id)} className="text-red-600 hover:text-red-800">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <FontAwesomeIcon icon={faTrash} />
Â  Â  Â  Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  Â  Â  Â  </td>
Â  Â  Â  Â  Â  Â  Â  </tr>
Â  Â  Â  Â  Â  Â  ))}
Â  Â  Â  Â  Â  </tbody>
Â  Â  Â  Â  </table>
Â  Â  Â  </div>

Â  Â  Â  {/* ContrÃ´les de pagination */}
Â  Â  Â  <div className="flex justify-between items-center mt-6">
Â  Â  Â  Â  <span>Page {currentPage} de {totalPages} ({totalCount} codes au total)</span>
Â  Â  Â  Â  <div>
Â  Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  Â  onClick={() => setCurrentPage(prev => Math.max(prev - 1, 1))}
Â  Â  Â  Â  Â  Â  disabled={currentPage === 1}
Â  Â  Â  Â  Â  Â  className="px-4 py-2 rounded-lg border dark:border-gray-600 disabled:opacity-50"
Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  PrÃ©cÃ©dent
Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  Â  onClick={() => setCurrentPage(prev => prev + 1)}
Â  Â  Â  Â  Â  Â  disabled={currentPage >= totalPages}
Â  Â  Â  Â  Â  Â  className="ml-2 px-4 py-2 rounded-lg border dark:border-gray-600 disabled:opacity-50"
Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Suivant
Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  </div>
Â  Â  Â  </div>
Â  Â  Â  {/* Modales */}
Â  Â  Â  <CreatePromoCodeModal isOpen={isCreateModalOpen} onClose={closeCreateModal} />
Â  Â  </div>
Â  );
};

export default PromoCode;