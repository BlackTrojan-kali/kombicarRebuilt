// src/pages/Auth/Signin.js
"use client";
import React, { useState, useEffect } from "react";
import Input from "../../Components/form/Input";
import FormButton from "../../Components/form/FormButton";
import useAuth from "../../hooks/useAuth";
import useColorScheme from "../../hooks/useColorScheme";
import { Toaster, toast } from 'react-hot-toast';
import { useNavigate } from "react-router-dom";
// ðŸŽ¯ Importez les composants de la bibliothÃ¨que
import { GoogleLogin } from '@react-oauth/google';

export default function Signin() {
Â  const [emailOrPhone, setEmailOrPhone] = useState('');
Â  const [password, setPassword] = useState('');
Â  const [rememberMe, setRememberMe] = useState(false);

Â  // ðŸŽ¯ RÃ©cupÃ©rez 'user', 'login', et 'loading' (externalLoginGoogle n'est plus nÃ©cessaire ici)
Â  const { user, login, loading } = useAuth();
Â  const { theme } = useColorScheme();
Â  const navigate = useNavigate();

Â  useEffect(() => {
Â  Â  if (user) {
Â  Â  Â  navigate('/');
Â  Â  }
Â  }, [user, navigate]);

Â  // Couleurs conditionnelles pour le dark mode
Â  const textColor = theme === 'dark' ? 'text-gray-100' : 'text-gray-900';
Â  const inputBg = theme === 'dark' ? 'bg-gray-700' : 'bg-white';
Â  const inputBorder = theme === 'dark' ? 'border-gray-600' : 'border-gray-300';
Â  const labelColor = theme === 'dark' ? 'text-gray-300' : 'text-gray-700';
Â  const cardBg = theme === 'dark' ? 'bg-gray-800' : 'bg-white';
Â  const shadow = theme === 'dark' ? 'shadow-lg' : 'shadow-md';

Â  const handleLogin = async (e) => {
Â  Â  e.preventDefault();
Â  Â  if (!emailOrPhone || !password) {
Â  Â  Â  toast.error('Veuillez entrer votre email/numÃ©ro de tÃ©lÃ©phone et votre mot de passe.', { position: 'top-right' });
Â  Â  Â  return;
Â  Â  }
Â  Â  const loginPromise = login({ email: emailOrPhone, password });
Â  Â  toast.promise(loginPromise, {
Â  Â  Â  loading: 'Connexion en cours...',
Â  Â  Â  error: (err) => `Erreur: ${err.message || 'Identifiants invalides.'}`,
Â  Â  });
Â  };

Â  // ðŸŽ¯ Nouvelle fonction pour gÃ©rer la rÃ©ponse de Google
Â  const handleGoogleSuccess = async (response) => {
Â  Â  toast.promise(
Â  Â  Â  // Une requÃªte vers votre API backend qui gÃ©rera l'Ã©change du token avec le profil utilisateur.
Â  Â  Â  login({ token: response.credential, provider: 'google' }),
Â  Â  Â  {
Â  Â  Â  Â  loading: 'Connexion via Google...',
Â  Â  Â  Â  success: 'Connexion rÃ©ussie !',
Â  Â  Â  Â  error: (err) => `Erreur: ${err.message || 'Ã‰chec de la connexion Google.'}`,
Â  Â  Â  }
Â  Â  );
Â  };

Â  const handleGoogleFailure = (error) => {
Â  Â  console.log('Ã‰chec de la connexion Google', error);
Â  Â  toast.error("Ã‰chec de la connexion via Google.");
Â  };

Â  // Rendu conditionnel
Â  if (user === undefined) {
Â  Â  return null;
Â  }

Â  return (
Â  Â  <div className={`min-h-screen ${theme === 'dark' ? 'bg-gray-900' : ''} text-gray-900 dark:text-gray-100 transition-colors duration-300 flex items-center justify-center py-20`}>
Â  Â  Â  <Toaster />

Â  Â  Â  <div className="w-[90vw] md:w-[500px] ">
Â  Â  Â  Â  <div className="flex items-center justify-center mb-6">
Â  Â  Â  Â  Â  {/* ðŸŽ¯ Remplacez le bouton par le composant GoogleLogin */}
Â  Â  Â  Â  Â  <GoogleLogin
Â  Â  Â  Â  Â  Â  onSuccess={handleGoogleSuccess}
Â  Â  Â  Â  Â  Â  onError={handleGoogleFailure}
Â  Â  Â  Â  Â  Â  useOneTap
Â  Â  Â  Â  Â  />
Â  Â  Â  Â  </div>
Â  Â  Â  Â  <div className={`py-4 text-center font-bold ${textColor}`}>Ou</div>

Â  Â  Â  Â  {/* Le reste du formulaire reste inchangÃ© */}
Â  Â  Â  Â  <div className="flex justify-center mb-6">
Â  Â  Â  Â  Â  <picture>
Â  Â  Â  Â  Â  Â  <img
Â  Â  Â  Â  Â  Â  Â  src="/default/logo.png"
Â  Â  Â  Â  Â  Â  Â  alt="Logo Kombicar"
Â  Â  Â  Â  Â  Â  Â  className="w-[80px] h-[80px]"
Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  </picture>
Â  Â  Â  Â  </div>
Â  Â  Â  Â  <h2 className={`text-3xl font-bold text-center mb-8 ${textColor}`}>Connexion</h2>
Â  Â  Â  Â  <form onSubmit={handleLogin} className="space-y-8 max-w-3xl mx-auto">
Â  Â  Â  Â  Â  <div className="grid gap-2">
Â  Â  Â  Â  Â  Â  <label htmlFor="emailOrPhone" className={labelColor}>Email ou numÃ©ro de tÃ©lÃ©phone</label>
Â  Â  Â  Â  Â  Â  <Input
Â  Â  Â  Â  Â  Â  Â  id="emailOrPhone"
Â  Â  Â  Â  Â  Â  Â  placeholder="699888777"
Â  Â  Â  Â  Â  Â  Â  type="text"
Â  Â  Â  Â  Â  Â  Â  required={true}
Â  Â  Â  Â  Â  Â  Â  className={`formInput w-full p-3 rounded-md border ${inputBorder} ${inputBg} ${textColor} focus:ring-blue-500 focus:border-blue-500`}
Â  Â  Â  Â  Â  Â  Â  value={emailOrPhone}
Â  Â  Â  Â  Â  Â  Â  onChange={(e) => setEmailOrPhone(e.target.value)}
Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  <div className="text-muted-foreground text-sm text-gray-500 dark:text-gray-400">
Â  Â  Â  Â  Â  Â  Â  Le numÃ©ro de tÃ©lÃ©phone sur lequel vous Ãªtes facilement joignable{" "}
Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  <div className="grid gap-2">
Â  Â  Â  Â  Â  Â  <label htmlFor="password" className={labelColor}>Mot de passe</label>
Â  Â  Â  Â  Â  Â  <Input
Â  Â  Â  Â  Â  Â  Â  id="password"
Â  Â  Â  Â  Â  Â  Â  placeholder="*******"
Â  Â  Â  Â  Â  Â  Â  type="password"
Â  Â  Â  Â  Â  Â  Â  required={true}
Â  Â  Â  Â  Â  Â  Â  className={`formInput w-full p-3 rounded-md border ${inputBorder} ${inputBg} ${textColor} focus:ring-blue-500 focus:border-blue-500`}
Â  Â  Â  Â  Â  Â  Â  value={password}
Â  Â  Â  Â  Â  Â  Â  onChange={(e) => setPassword(e.target.value)}
Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  <div className="text-muted-foreground text-sm text-gray-500 dark:text-gray-400">
Â  Â  Â  Â  Â  Â  Â  Votre mot de passe doit contenir au moins 8 caractÃ¨res.
Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  <div className="flex flex-row items-start space-x-3 space-y-0 rounded-md border p-4">
Â  Â  Â  Â  Â  Â  <input
Â  Â  Â  Â  Â  Â  Â  id="rememberMe"
Â  Â  Â  Â  Â  Â  Â  checked={rememberMe}
Â  Â  Â  Â  Â  Â  Â  onChange={(e) => setRememberMe(e.target.checked)}
Â  Â  Â  Â  Â  Â  Â  type="checkbox"
Â  Â  Â  Â  Â  Â  Â  className={`mr-2 h-5 w-5 text-blue-600 border-gray-300 rounded focus:ring-blue-500
Â  Â  Â  Â  Â  Â  Â  Â  ${theme === 'dark' ? 'bg-gray-700 border-gray-600' : ''}`}
Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  <div className="space-y-1 leading-none">
Â  Â  Â  Â  Â  Â  Â  <label htmlFor="rememberMe" className={labelColor}>
Â  Â  Â  Â  Â  Â  Â  Â  Se souvenir de moi
Â  Â  Â  Â  Â  Â  Â  </label>
Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  <FormButton
Â  Â  Â  Â  Â  Â  type="submit"
Â  Â  Â  Â  Â  Â  disabled={loading}
Â  Â  Â  Â  Â  Â  className="w-full bg-[#2682F3] hover:bg-[#0B32B5] text-white text-xl p-3 rounded-md"
Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  {loading ? 'Connexion...' : 'Se connecter'}
Â  Â  Â  Â  Â  </FormButton>
Â  Â  Â  Â  </form>
Â  Â  Â  </div>
Â  Â  </div>
Â  );
}