import React, { useEffect, useState } from 'react';
import { useParams, Link } from 'react-router-dom'; // ðŸ‘ˆ AJOUT DE Link
import useReservation from '../../hooks/useReservation';
// ðŸ‘ˆ Importations pour les icÃ´nes FontAwesome
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { faComments } from '@fortawesome/free-solid-svg-icons'; // ðŸ‘ˆ AJOUT DE faComments

// DÃ©finitions de constantes pour les statuts de rÃ©servation (Ã  adapter Ã  votre API)
const RESERVATION_STATUS = {
Â  Â  ALL: 'all', // Statut pour l'affichage de toutes les rÃ©servations (frontend only)
Â  Â  CONFIRMED: 0,
Â  Â  PENDING: 1,
Â  Â  CANCELED: 2,
Â  Â  REFUSED: 3,
Â  Â  // Ajoutez d'autres statuts si nÃ©cessaire
};

// Fonction utilitaire pour convertir le statut numÃ©rique en affichage
const getStatusDisplay = (statusValue) => {
Â  Â  switch (statusValue) {
Â  Â  Â  Â  case RESERVATION_STATUS.CONFIRMED:
Â  Â  Â  Â  Â  Â  return { text: 'ConfirmÃ©e', className: 'bg-green-100 text-green-800' };
Â  Â  Â  Â  case RESERVATION_STATUS.PENDING:
Â  Â  Â  Â  Â  Â  return { text: 'En attente', className: 'bg-yellow-100 text-yellow-800' };
Â  Â  Â  Â  case RESERVATION_STATUS.CANCELED:
Â  Â  Â  Â  Â  Â  return { text: 'AnnulÃ©e', className: 'bg-red-100 text-red-800' };
Â  Â  Â  Â  case RESERVATION_STATUS.REFUSED:
Â  Â  Â  Â  Â  Â  return { text: 'RefusÃ©e', className: 'bg-red-500 text-white' };
Â  Â  Â  Â  // DÃ©finit 'ConfirmÃ©e' comme statut par dÃ©faut en cas de valeur non mappÃ©e
Â  Â  Â  Â  default:
Â  Â  Â  Â  Â  Â  return { text: 'ConfirmÃ©e (dÃ©faut)', className: 'bg-green-100 text-green-800' };
Â  Â  }
};

const DriverReservations = () => {
Â  Â  const { trip: tripTypeParam, id: tripId } = useParams(); 
Â  Â  const { getReservationsForDriver, isLoading, error } = useReservation();

Â  Â  const [apiData, setApiData] = useState(null); 
Â  Â  const [filteredReservations, setFilteredReservations] = useState(null);
Â  Â  
Â  Â  // ðŸš© MISE Ã€ JOUR : Initialise le filtre sur CONFIRMED (0)
Â  Â  const [filterStatus, setFilterStatus] = useState(RESERVATION_STATUS.CONFIRMED); 
Â  Â  
Â  Â  const [page, setPage] = useState(1); 

Â  Â  const displayTripType = tripTypeParam === 'covoiturage' ? 'Covoiturage' : 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â tripTypeParam === 'taxi' ? 'Taxi' : 'Trajet';
Â  Â  
Â  Â  // Logique de Filtrage cÃ´tÃ© client
Â  Â  useEffect(() => {
Â  Â  Â  Â  if (apiData && apiData.items) {
Â  Â  Â  Â  Â  Â  if (filterStatus === RESERVATION_STATUS.ALL) {
Â  Â  Â  Â  Â  Â  Â  Â  setFilteredReservations(apiData.items);
Â  Â  Â  Â  Â  Â  } else {
Â  Â  Â  Â  Â  Â  Â  Â  // Filtre par le statut numÃ©rique (RESERVATION_STATUS.CONFIRMED si par dÃ©faut)
Â  Â  Â  Â  Â  Â  Â  Â  const filtered = apiData.items.filter(item => 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  item.reservation.status === filterStatus
Â  Â  Â  Â  Â  Â  Â  Â  );
Â  Â  Â  Â  Â  Â  Â  Â  setFilteredReservations(filtered);
Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  }
Â  Â  }, [filterStatus, apiData]);

Â  Â  // Effet pour charger les rÃ©servations depuis l'API
Â  Â  useEffect(() => {
Â  Â  Â  Â  if (!tripId) return;

Â  Â  Â  Â  const fetchReservations = async () => {
Â  Â  Â  Â  Â  Â  try {
Â  Â  Â  Â  Â  Â  Â  Â  const data = await getReservationsForDriver(tripId, page);
Â  Â  Â  Â  Â  Â  Â  Â  setApiData(data); // Stocke les donnÃ©es brutes de l'API (non filtrÃ©es)
Â  Â  Â  Â  Â  Â  } catch (err) {
Â  Â  Â  Â  Â  Â  Â  Â  console.error("Ã‰chec du chargement des rÃ©servations du conducteur:", err);
Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  };

Â  Â  Â  Â  fetchReservations();
Â  Â  }, [tripId, page]); 

Â  Â  const handleFilterChange = (e) => {
Â  Â  Â  Â  // La valeur est convertie en entier, sauf si c'est 'all'
Â  Â  Â  Â  const value = e.target.value === 'all' ? e.target.value : parseInt(e.target.value);
Â  Â  Â  Â  setFilterStatus(value);
Â  Â  };

Â  Â  const reservationsToDisplay = filteredReservations || [];
Â  Â  const totalCount = apiData ? apiData.totalCount : 0;

Â  Â  return (
Â  Â  Â  Â  <div className="driver-reservations-container p-6 Â rounded-lg">
Â  Â  Â  Â  Â  Â  <h1 className="text-2xl font-bold mb-4 text-gray-800">
Â  Â  Â  Â  Â  Â  Â  Â  RÃ©servations pour mon trajet {displayTripType}
Â  Â  Â  Â  Â  Â  </h1>
Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  <p className="text-gray-500 mb-6">
Â  Â  Â  Â  Â  Â  Â  Â  ID du Trajet: <span className="font-mono text-indigo-600">{tripId}</span>
Â  Â  Â  Â  Â  Â  </p>

Â  Â  Â  Â  Â  Â  {/* --- SECTION FILTRE ET STATISTIQUES --- */}
Â  Â  Â  Â  Â  Â  <div className="flex justify-between items-center mb-6 p-3 bg-gray-50 border rounded-md">
Â  Â  Â  Â  Â  Â  Â  Â  <h2 className="text-xl font-semibold text-gray-800">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Passagers ({reservationsToDisplay.length} affichÃ©s / {totalCount} total)
Â  Â  Â  Â  Â  Â  Â  Â  </h2>
Â  Â  Â  Â  Â  Â  Â  Â  <div className="flex items-center space-x-2">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <label htmlFor="status-filter" className="text-sm font-medium text-gray-700">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Filtrer par statut:
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </label>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <select
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  id="status-filter"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  value={filterStatus}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onChange={handleFilterChange}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  className="py-1.5 px-3 border border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 text-sm"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <option value={RESERVATION_STATUS.CONFIRMED}>ConfirmÃ©e</option>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <option value={RESERVATION_STATUS.PENDING}>En attente</option>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <option value={RESERVATION_STATUS.ALL}>Tous les statuts</option>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <option value={RESERVATION_STATUS.CANCELED}>AnnulÃ©e</option>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <option value={RESERVATION_STATUS.REFUSED}>RefusÃ©e</option>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </select>
Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  {/* ------------------------------------- */}

Â  Â  Â  Â  Â  Â  {/* Affichage des Ã©tats */}
Â  Â  Â  Â  Â  Â  {isLoading ? (
Â  Â  Â  Â  Â  Â  Â  Â  <div className="text-center py-10 text-lg text-indigo-500">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Chargement des rÃ©servations...
Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  ) : error ? (
Â  Â  Â  Â  Â  Â  Â  Â  <div className="text-center py-10 text-lg text-red-500">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Erreur de chargement: {error}
Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  ) : reservationsToDisplay.length > 0 ? (
Â  Â  Â  Â  Â  Â  Â  Â  <div className="reservations-list space-y-4">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {reservationsToDisplay.map((item) => {
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  const client = item.client;
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  const reservation = item.reservation;
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  const status = getStatusDisplay(reservation.status);

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  return (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div key={reservation.id} className="p-4 border rounded-lg bg-white flex justify-between items-center hover:shadow-lg transition duration-150">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className='flex items-center space-x-4'>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <p className="font-semibold text-lg text-gray-800">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Passager: {client.firstName} {client.lastName}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </p>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <p className="text-sm text-gray-600">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Places rÃ©servÃ©es: **{reservation.numberReservedPlaces}**
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </p>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <p className="text-sm text-gray-500">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  TÃ©lÃ©phone: {client.phoneNumber || 'Non spÃ©cifiÃ©'}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </p>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className='flex flex-col items-end space-y-2'>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <span className={`px-3 py-1 text-sm font-medium rounded-full ${status.className}`}>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {status.text.replace(' (dÃ©faut)', '')}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </span>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {/* Boutons d'action conditionnels et bouton de Chat */}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className='flex space-x-2'>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {/* ðŸ‘ˆ NOUVEAU : BOUTON CHAT */}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <Link 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  to={`/chat/${reservation.id}`}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  className='text-xs px-2 py-1 bg-blue-500 text-white rounded hover:bg-blue-600 transition-colors duration-150 flex items-center'
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <FontAwesomeIcon icon={faComments} className="mr-1" />
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Chat
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </Link>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {reservation.status === RESERVATION_STATUS.PENDING && (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <> 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <button className='text-xs px-2 py-1 bg-green-500 text-white rounded hover:bg-green-600'>Confirmer</button>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <button className='text-xs px-2 py-1 bg-red-500 text-white rounded hover:bg-red-600'>Refuser</button>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  );
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  })}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {/* Logique de pagination ici */}
Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  ) : (
Â  Â  Â  Â  Â  Â  Â  Â  <div className="text-center py-10 text-lg text-gray-500 border border-dashed p-8 rounded-lg">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {filterStatus === RESERVATION_STATUS.ALL 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  ? 'Aucune rÃ©servation trouvÃ©e pour ce trajet.'
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  : `Aucune rÃ©servation trouvÃ©e avec le statut "${getStatusDisplay(filterStatus).text.replace(' (dÃ©faut)', '')}".`
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  </div>
Â  Â  );
};

export default DriverReservations;