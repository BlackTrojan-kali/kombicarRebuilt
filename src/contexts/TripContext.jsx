import { createContext, useState, useContext } from "react";
import api from '../api/api';
import toast from 'react-hot-toast';
import useAuth from "../hooks/useAuth";

export const tripContext = createContext({});

export function TripContextProvider({ children }) {
Â  Â  const { user, loading: authLoading } = useAuth();
Â  Â  const [trips, setTrips] = useState([]);
Â  Â  const [loading, setLoading] = useState(false);
Â  Â  const [error, setError] = useState(null);

Â  Â  const fetchTrips = async ({pageIndex,status}) => {
Â  Â  Â  Â  if (authLoading) return;
Â  Â  Â  Â  setLoading(true);
Â  Â  Â  Â  setError(null);
Â  Â  Â  Â  const url = `/api/v1/trips/${pageIndex}/${status}`;
Â  Â  Â  Â  
Â  Â  Â  Â  console.log(url)

Â  Â  Â  Â  try {
Â  Â  Â  Â  Â  Â  const response = await api.get(url);
Â  Â  Â  Â  Â  Â  const data = response.data;
Â  Â  Â  Â  Â  Â  if (data && Array.isArray(data.items) && data.items.length > 0) {
Â  Â  Â  Â  Â  Â  Â  Â  setTrips(data.items);
Â  Â  Â  Â  Â  Â  Â  Â  toast.success('Trajets chargÃ©s avec succÃ¨s !');
Â  Â  Â  Â  Â  Â  } else {
Â  Â  Â  Â  Â  Â  Â  Â  setTrips([]);
Â  Â  Â  Â  Â  Â  Â  Â  toast.error('Aucun trajet trouvÃ©.');
Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  Â  return data;
Â  Â  Â  Â  } catch (err) {
Â  Â  Â  Â  Â  Â  console.error("Erreur lors de la rÃ©cupÃ©ration des trajets:", err);
Â  Â  Â  Â  Â  Â  setError(err);
Â  Â  Â  Â  Â  Â  setTrips([]);
Â  Â  Â  Â  Â  Â  toast.error(err.response?.data?.message || 'Ã‰chec du chargement des trajets.');
Â  Â  Â  Â  Â  Â  throw err;
Â  Â  Â  Â  } finally {
Â  Â  Â  Â  Â  Â  setLoading(false);
Â  Â  Â  Â  }
Â  Â  };
Â  Â  
Â  Â  const listPublicTrips = async (searchCriteria) => {
Â  Â  Â  Â  setLoading(true);
Â  Â  Â  Â  setError(null);
Â  Â  Â  Â  try {
Â  Â  Â  Â  Â  Â  const response = await api.post('/api/v1/trips/list-public', searchCriteria);
Â  Â  Â  Â  Â  Â  console.log(response.data)
Â  Â  Â  Â  Â  Â  const data = response.data;
Â  Â  Â  Â  Â  Â  if (data && Array.isArray(data.items) && data.items.length > 0) {
Â  Â  Â  Â  Â  Â  Â  Â  setTrips(data);
Â  Â  Â  Â  Â  Â  Â  Â  toast.success('Trajets publics trouvÃ©s avec succÃ¨s !');
Â  Â  Â  Â  Â  Â  } else {
Â  Â  Â  Â  Â  Â  Â  Â  setTrips([]);
Â  Â  Â  Â  Â  Â  Â  Â  toast.error('Aucun trajet public ne correspond Ã  vos critÃ¨res.');
Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  Â  return data;
Â  Â  Â  Â  } catch (err) {
Â  Â  Â  Â  Â  Â  console.error("Erreur lors de la recherche des trajets publics:", err);
Â  Â  Â  Â  Â  Â  setError(err);
Â  Â  Â  Â  Â  Â  setTrips([]);
Â  Â  Â  Â  Â  Â  toast.error(err.response?.data?.message || 'Ã‰chec de la recherche des trajets publics.');
Â  Â  Â  Â  Â  Â  throw err;
Â  Â  Â  Â  } finally {
Â  Â  Â  Â  Â  Â  setLoading(false);
Â  Â  Â  Â  }
Â  Â  };
Â  Â  
Â  Â  const createTrip = async (tripData) => {
Â  Â  Â  Â  if (authLoading) return;
Â  Â  Â  Â  if (!user || !user.id) {
Â  Â  Â  Â  Â  Â  toast.error("Veuillez vous connecter pour publier un trajet.");
Â  Â  Â  Â  Â  Â  return null;
Â  Â  Â  Â  }

Â  Â  Â  Â  setLoading(true);
Â  Â  Â  Â  setError(null);
Â  Â  Â  Â  
Â  Â  Â  Â  const newTripData = { ...tripData, userId: user.id };
Â  Â  Â  Â  console.log("DonnÃ©es du trajet Ã  envoyer:", newTripData);

Â  Â  Â  Â  try {
Â  Â  Â  Â  Â  Â  const response = await api.post('/api/v1/trips', newTripData);
Â  Â  Â  Â  Â  Â  toast.success('Trajet publiÃ© avec succÃ¨s!');
Â  Â  Â  Â  Â  Â  return response.data;
Â  Â  Â  Â  } catch (err) {
Â  Â  Â  Â  Â  Â  console.error("Erreur lors de la crÃ©ation du trajet:", err);
Â  Â  Â  Â  Â  Â  setError(err);
Â  Â  Â  Â  Â  Â  toast.error(err.response?.data?.description || 'Ã‰chec de la publication du trajet.');
Â  Â  Â  Â  Â  Â  throw err;
Â  Â  Â  Â  } finally {
Â  Â  Â  Â  Â  Â  setLoading(false);
Â  Â  Â  Â  }
Â  Â  };

Â  Â  const getTripById = async (id) => {
Â  Â  Â  Â  setLoading(true);
Â  Â  Â  Â  setError(null);
Â  Â  Â  Â  try {
Â  Â  Â  Â  Â  Â  const response = await api.get(`/api/v1/trips/${id}`);
Â  Â  Â  Â  Â console.log(response)
Â  Â  Â  Â  Â  Â  toast.success('Trajet trouvÃ© !');
Â  Â  Â  Â  Â  Â  return response.data;
Â  Â  Â  Â  } catch (err) {
Â  Â  Â  Â  Â  Â  console.error(`Erreur lors de la rÃ©cupÃ©ration du trajet ${id}:`, err);
Â  Â  Â  Â  Â  Â  setError(err);
Â  Â  Â  Â  } finally {
Â  Â  Â  Â  Â  Â  setLoading(false);
Â  Â  Â  Â  }
Â  Â  };

Â  Â  const deleteTrip = async (id) => {
Â  Â  Â  Â  if (authLoading) return;
Â  Â  Â  Â  if (!user || !user.id) {
Â  Â  Â  Â  Â  Â  toast.error("Veuillez vous connecter pour supprimer un trajet.");
Â  Â  Â  Â  Â  Â  return null;
Â  Â  Â  Â  }

Â  Â  Â  Â  setLoading(true);
Â  Â  Â  Â  setError(null);

Â  Â  Â  Â  try {
Â  Â  Â  Â  Â  Â  const response = await api.delete(`/api/v1/trips/${id}`);
Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  toast.success('Trajet supprimÃ© avec succÃ¨s!');
Â  Â  Â  Â  Â  Â  return response.data;
Â  Â  Â  Â  } catch (err) {
Â  Â  Â  Â  Â  Â  console.error(`Erreur lors de la suppression du trajet ${id}:`, err);
Â  Â  Â  Â  Â  Â  setError(err);
Â  Â  Â  Â  Â  Â  toast.error(err.response?.data?.description Â || 'Ã‰chec de la suppression du trajet.');
Â  Â  Â  Â  Â  Â  throw err;
Â  Â  Â  Â  } finally {
Â  Â  Â  Â  Â  Â  setLoading(false);
Â  Â  Â  Â  }
Â  Â  };

Â  Â  const deleteTripAsAdmin = async (tripId) => {
Â  Â  Â  Â  if (authLoading) return;
Â  Â  Â  Â  
Â  Â  Â  Â  setLoading(true);
Â  Â  Â  Â  setError(null);
Â  Â  Â  Â  
Â  Â  Â  Â  try {
Â  Â  Â  Â  Â  Â  await api.delete(`/api/v1/trips/admin/${tripId}`);
Â  Â  Â  Â  Â  Â  toast.success('Le trajet a Ã©tÃ© supprimÃ© par l\'administrateur.');
Â  Â  Â  Â  Â  Â  fetchTrips(); 
Â  Â  Â  Â  Â  Â  return true;
Â  Â  Â  Â  } catch (err) {
Â  Â  Â  Â  Â  Â  console.error(`Erreur lors de la suppression du trajet ${tripId} par l'admin :`, err);
Â  Â  Â  Â  Â  Â  setError(err);
Â  Â  Â  Â  Â  Â  toast.error(err.response?.data?.message || 'Ã‰chec de la suppression du trajet par l\'administrateur.');
Â  Â  Â  Â  Â  Â  return false;
Â  Â  Â  Â  } finally {
Â  Â  Â  Â  Â  Â  setLoading(false);
Â  Â  Â  Â  }
Â  Â  };

Â  Â  // Nouvelle fonction pour le changement de statut par un administrateur
Â  Â  const changeTripStatusAsAdmin = async (tripId, status) => {
Â  Â  Â  Â  if (authLoading) return;
Â  Â  Â  Â  setLoading(true);
Â  Â  Â  Â  setError(null);
Â  Â  Â  Â  try {
Â  Â  Â  Â  Â  Â  await api.put(`/api/v1/trips/admin/change-status/${tripId}/${status}`);
Â  Â  Â  Â  Â  Â  toast.success('Le statut du trajet a Ã©tÃ© mis Ã  jour avec succÃ¨s.');
Â  Â  Â  Â  Â  Â  return true;
Â  Â  Â  Â  } catch (err) {
Â  Â  Â  Â  Â  Â  console.error(`Erreur lors de la mise Ã  jour du statut du trajet ${tripId}:`, err);
Â  Â  Â  Â  Â  Â  setError(err);
Â  Â  Â  Â  Â  Â  toast.error(err.response?.data?.message || 'Ã‰chec de la mise Ã  jour du statut du trajet.');
Â  Â  Â  Â  Â  Â  return false;
Â  Â  Â  Â  } finally {
Â  Â  Â  Â  Â  Â  setLoading(false);
Â  Â  Â  Â  }
Â  Â  };
Â  Â  
Â  Â  // ðŸ†• Nouvelle fonction pour la mise Ã  jour d'un trajet par l'utilisateur
Â  Â  const updateTrip = async (updatedTripData) => {
Â  Â  Â  Â  if (authLoading) return;
Â  Â  Â  Â  setLoading(true);
Â  Â  Â  Â  setError(null);
Â  Â  Â  Â  try {
Â  Â  Â  Â  Â  Â  const response = await api.put(`/api/v1/trips`, updatedTripData);
Â  Â  Â  Â  Â  Â  toast.success('Trajet mis Ã  jour avec succÃ¨s !');
Â  Â  Â  Â  Â  Â  return response.data;
Â  Â  Â  Â  } catch (err) {
Â  Â  Â  Â  Â  Â  console.error(`Erreur lors de la mise Ã  jour du trajet:`, err);
Â  Â  Â  Â  Â  Â  setError(err);
Â  Â  Â  Â  Â  Â  toast.error(err.response?.data?.message || 'Ã‰chec de la mise Ã  jour du trajet.');
Â  Â  Â  Â  Â  Â  throw err;
Â  Â  Â  Â  } finally {
Â  Â  Â  Â  Â  Â  setLoading(false);
Â  Â  Â  Â  }
Â  Â  };
Â  Â  
Â  Â  const contextValue = {
Â  Â  Â  Â  trips,
Â  Â  Â  Â  loading,
Â  Â  Â  Â  error,
Â  Â  Â  Â  fetchTrips,
Â  Â  Â  Â  getTripById,
Â  Â  Â  Â  createTrip,
Â  Â  Â  Â  listPublicTrips, 
Â  Â  Â  Â  deleteTrip,
Â  Â  Â  Â  deleteTripAsAdmin,
Â  Â  Â  Â  changeTripStatusAsAdmin, 
Â  Â  Â  Â  updateTrip,
Â  Â  Â  Â  userId: user?.id || null
Â  Â  };

Â  Â  return (
Â  Â  Â  Â  <tripContext.Provider value={contextValue}>
Â  Â  Â  Â  Â  Â  {children}
Â  Â  Â  Â  </tripContext.Provider>
Â  Â  );
}