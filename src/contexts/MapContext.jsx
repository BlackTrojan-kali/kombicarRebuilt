import { createContext, useState, useEffect } from "react"; // ðŸ‘ˆ Ajout de useEffect
import api from '../api/api';
import useAuth from "../hooks/useAuth";

export const MapContext = createContext({});

export function MapContextProvider({ children }) {
Â  const [places, setPlaces] = useState([]);
Â  const [loading, setLoading] = useState(false);
Â  const [error, setError] = useState(null);
Â  
Â  // Nouveau state pour stocker le pays de l'utilisateur (objet complet)
Â  const [userCountry, setUserCountry] = useState(null); 
Â  // Code numÃ©rique du pays, utilisÃ© par dÃ©faut pour la recherche
Â  const [countryCode , setCountryCode] = useState(237); // Par dÃ©faut 237 (Cameroun)
Â  
Â  // RÃ©cupÃ©ration de l'utilisateur
Â  const {user} = useAuth();

  // Ã‰tat de chargement spÃ©cifique Ã  la rÃ©cupÃ©ration du pays
  const [countryLoading, setCountryLoading] = useState(false); 

Â  /**
Â  Â * Effectue une recherche de lieux via une requÃªte POST. (InchangÃ©e)
Â  Â */
Â  const searchPlaces = async (query, country = countryCode) => {
Â  Â  // ... (Logique searchPlaces)
    if (!query) {
      console.error("Le paramÃ¨tre 'query' (string) est requis.");
      setError("Le paramÃ¨tre de recherche est manquant.");
      return;
    }

    setLoading(true); 
    setPlaces([]);
    setError(null);
    try {
      const response = await api.post(
        `/api/v1/maps/search-places`,
        { query, country }
      );
      
      setPlaces(response.data);
    } catch (err) {
      if (err.response) {
        setError(err.response.data.message || "Erreur du serveur lors de la recherche.");
      } else if (err.request) {
        setError("ProblÃ¨me de connexion. Veuillez vÃ©rifier votre rÃ©seau.");
      } else {
        setError(err.message || "Une erreur inattendue est survenue.");
      }
      console.error("Erreur de l'API de recherche:", err.response || err);
    } finally {
      setLoading(false);
    }
Â  };

Â  /**
Â  Â * DÃ©termine le pays de l'utilisateur Ã  partir de ses coordonnÃ©es GPS.
Â  Â * NOTE: On utilise setCountryLoading ici pour gÃ©rer le chargement.
Â  Â */
Â  const getCountryFromCoords = async (latitude, longitude) => {
    if (!latitude || !longitude) {
      console.error("Les paramÃ¨tres 'latitude' et 'longitude' sont requis.");
      setError("CoordonnÃ©es GPS manquantes.");
      return;
    }

    setLoading(true);
    setUserCountry(null); // RÃ©initialiser l'ancien pays
    setError(null);
    try {
      // Les paramÃ¨tres sont envoyÃ©s dans le corps de la requÃªte POST
      const response = await api.post(
        `/api/v1/maps/get-country`,
        { latitude, longitude }
      );
      
      // Assurez-vous que la rÃ©ponse contient les donnÃ©es attendues (ex: { countryCode: 'CM', countryName: 'Cameroun' })
      setUserCountry(response.data);
      return response.data; // Renvoyer les donnÃ©es pour une utilisation immÃ©diate si nÃ©cessaire
      
    } catch (err) {
      if (err.response) {
        setError(err.response.data.message || "Erreur du serveur lors de la rÃ©cupÃ©ration du pays.");
      } else if (err.request) {
        setError("ProblÃ¨me de connexion pour la gÃ©olocalisation. Veuillez vÃ©rifier votre rÃ©seau.");
      } else {
        setError(err.message || "Une erreur inattendue est survenue lors de la gÃ©olocalisation.");
      }
      console.error("Erreur de l'API get-country:", err.response || err);
      return null;
      
    } finally {
      setLoading(false);
    }
  }; 
// --- LOGIQUE DE DÃ‰TERMINATION DU PAYS ---
  useEffect(() => {
    const determineCountry = async () => {
      // 1. Si l'utilisateur est connectÃ© et le pays est dans son profil
      if (user && user.country && user.country) {
        setUserCountry(user.country);
        setCountryCode(user.country); // Utilise le code du pays de l'utilisateur
        return;
      }

      // 2. Si l'utilisateur N'EST PAS connectÃ©, utiliser la gÃ©olocalisation
      if (!user) {
        setCountryLoading(true);
        
        const getUserLocation = () => {
          return new Promise((resolve, reject) => {
            if (!navigator.geolocation) {
              reject(new Error("La gÃ©olocalisation n'est pas supportÃ©e."));
              return;
            }
            
            // RÃ©cupÃ©rer la position avec timeout
            navigator.geolocation.getCurrentPosition(
              (position) => resolve({
                latitude: position.coords.latitude,
                longitude: position.coords.longitude
              }),
              (err) => reject(new Error(`Erreur de gÃ©olocalisation: ${err.message}`)),
              { enableHighAccuracy: false, timeout: 5000, maximumAge: 0 }
            );
          });
        };

        try {
          const coords = await getUserLocation();
          // Appel Ã  getCountryFromCoords qui met Ã  jour userCountry et countryCode
          await getCountryFromCoords(coords.latitude, coords.longitude);
        } catch (err) {
          console.warn(err.message);
          // Si la gÃ©olocalisation Ã©choue, les valeurs par dÃ©faut (237) sont conservÃ©es.
        } finally {
          setCountryLoading(false); // Fait aussi dans getCountryFromCoords, mais pour la sÃ©curitÃ©
        }
      }
    };

    determineCountry();
    // DÃ©pendance sur `user` pour rÃ©agir Ã  la connexion/dÃ©connexion
  }, [user]); 

Â  const value = {
Â  Â  places,
Â  Â  loading, // Chargement de searchPlaces
    countryLoading, // Chargement de la gÃ©olocalisation/API country
Â  Â  error,
Â  Â  searchPlaces,
Â  Â  // Ajout des nouvelles valeurs
Â  Â  userCountry, 
    countryCode, // Nouveau: code utilisÃ© par dÃ©faut dans searchPlaces
Â  Â  getCountryFromCoords,
Â  };

Â  return (
Â  Â  <MapContext.Provider value={value}>
Â  Â  Â  {children}
Â  Â  </MapContext.Provider>
Â  );
}