import { createContext, useEffect, useState } from "react";
import api from '../api/api';
import { toast } from "sonner";
import { Toaster } from "../Components/ui/sonner"
import "../App.css"
// L'import de API_URL depuis '../api/api-settings' a Ã©tÃ© commentÃ©/retirÃ© 
// et dÃ©fini localement pour correspondre Ã  votre code prÃ©cÃ©dent.

export const authContext = createContext({});

export function AuthContextProvider({ children }) {
Â  Â  const [user, setUser] = useState(null);
Â  Â  const [loading, setLoading] = useState(true);
Â  Â  // NOUVEL Ã‰TAT : Pays dÃ©tectÃ© pour les utilisateurs non authentifiÃ©s
Â  Â  const [defaultCountry, setDefaultCountry] = useState(null); 
Â  Â  
Â  Â  // Utilisation de l'URL que vous avez dÃ©finie localement
Â  Â  const API_URL = "https://test.kombicar.api"

Â  Â  const logout = async (showToast = true) => {
Â  Â  Â  Â  setLoading(true);
Â  Â  Â  Â  localStorage.removeItem('accessToken');
Â  Â  Â  Â  localStorage.removeItem('refreshToken');
Â  Â  Â  Â  setUser(null);
Â  Â  Â  Â  setLoading(false);
Â  Â  Â  Â  // Tenter de redÃ©terminer le pays par dÃ©faut aprÃ¨s la dÃ©connexion
Â  Â  Â  Â  fetchDefaultCountry(); 
Â  Â  Â  Â  if (showToast) {
Â  Â  Â  Â  Â  Â  toast.success('DÃ©connexion rÃ©ussie');
Â  Â  Â  Â  }
Â  Â  };

Â  Â  /**
Â  Â   * Tente d'obtenir la gÃ©olocalisation de l'utilisateur et d'appeler l'API
Â  Â   * pour dÃ©terminer le pays par dÃ©faut (pour les utilisateurs non connectÃ©s).
Â  Â   */
Â  Â  const fetchDefaultCountry = async () => {
Â  Â  Â  Â  // Si un utilisateur est dÃ©jÃ  connectÃ© (vÃ©rification du token), on ne fait rien.
Â  Â  Â  Â  if (localStorage.getItem('accessToken')) {
Â  Â  Â  Â  Â  Â  return;
Â  Â  Â  Â  }

Â  Â  Â  Â  const getCoords = new Promise((resolve, reject) => {
Â  Â  Â  Â  Â  Â  if (!("geolocation" in navigator)) {
Â  Â  Â  Â  Â  Â  Â  Â  reject(new Error("GÃ©olocalisation non supportÃ©e."));
Â  Â  Â  Â  Â  Â  Â  Â  return;
Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  Â  navigator.geolocation.getCurrentPosition(
Â  Â  Â  Â  Â  Â  Â  Â  (pos) => resolve({ lat: pos.coords.latitude, lng: pos.coords.longitude }),
Â  Â  Â  Â  Â  Â  Â  Â  (err) => reject(err),
Â  Â  Â  Â  Â  Â  Â  Â  { enableHighAccuracy: false, timeout: 5000, maximumAge: 0 }
Â  Â  Â  Â  Â  Â  );
Â  Â  Â  Â  });

Â  Â  Â  Â  try {
Â  Â  Â  Â  Â  Â  // 1. Obtenir les coordonnÃ©es GPS
Â  Â  Â  Â  Â  Â  const coords = await getCoords;
Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  // 2. Appeler l'API /get-country
Â  Â  Â  Â  Â  Â  const response = await api.post('/api/v1/maps/get-country', {
Â  Â  Â  Â  Â  Â  Â  Â  latitude: coords.lat,
Â  Â  Â  Â  Â  Â  Â  Â  longitude: coords.lng
Â  Â  Â  Â  Â  Â  });
Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  // 3. Stocker le pays par dÃ©faut
Â  Â  Â  Â  Â  Â  setDefaultCountry(response.data);
Â  Â  Â  Â  Â  Â  toast.info(`Pays dÃ©tectÃ© : ${response.data.countryName || 'Inconnu'}`, { duration: 1500 });

Â  Â  Â  Â  } catch (err) {
Â  Â  Â  Â  Â  Â  // En cas d'Ã©chec (refus de permission, timeout, ou erreur API), utiliser le pays par dÃ©faut
Â  Â  Â  Â  Â  Â  console.warn("Ã‰chec de la gÃ©olocalisation ou de l'API get-country:", err.message || err);
Â  Â  Â  Â  Â  Â  setDefaultCountry({ countryCode: 237, countryName: "Cameroun (Par dÃ©faut)" }); 
Â  Â  Â  Â  }
Â  Â  };

Â  Â  const fetchUserInfo = async () => {
Â  Â  Â  Â  try {
Â  Â  Â  Â  Â  Â  const response = await api.get('/api/v1/users/infos');
Â  Â  Â  Â  Â  Â  const fullUserInfo = response.data;
Â  Â  Â  Â  Â  Â  // Logique de rÃ´le corrigÃ©e : 'User' par dÃ©faut si ce n'est pas 1 ou 2
Â  Â  Â  Â  Â  Â  const roleName = fullUserInfo.role === 1 || fullUserInfo.role === 2 ? 'Admin' : 'User';
Â  Â  Â  Â  Â 
Â  Â  Â  Â  Â  Â  setUser({
Â  Â  Â  Â  Â  Â  Â  Â  id: fullUserInfo.id,
Â  Â  Â  Â  Â  Â  Â  Â  email: fullUserInfo.email,
Â  Â  Â  Â  Â  Â  Â  Â  username: fullUserInfo.email,
Â  Â  Â  Â  Â  Â  Â  Â  firstName: fullUserInfo.firstName,
Â  Â  Â  Â  Â  Â  Â  Â  lastName: fullUserInfo.lastName,
Â  Â  Â  Â  Â  Â  Â  Â  country: fullUserInfo.country, // Pays de l'utilisateur AUTHENTIFIÃ‰
Â  Â  Â  Â  Â  Â  Â  Â  role: roleName,
Â  Â  Â  Â  Â  Â  Â  Â  phoneNumber: fullUserInfo.phoneNumber,
Â  Â  Â  Â  Â  Â  Â  Â  pictureProfileUrl: fullUserInfo.pictureProfileUrl,
Â  Â  Â  Â  Â  Â  Â  Â  balance: fullUserInfo.balance,
Â  Â  Â  Â  Â  Â  Â  Â  note: fullUserInfo.note,
Â  Â  Â  Â  Â  Â  Â  Â  createdAt: fullUserInfo.createdAt
Â  Â  Â  Â  Â  Â  });
Â  Â  Â  Â  Â  Â  // Si un utilisateur se connecte, effacer le pays par dÃ©faut temporaire
Â  Â  Â  Â  Â  Â  setDefaultCountry(null); 
Â  Â  Â  Â  Â  Â  return true;
Â  Â  Â  Â  } catch (error) {
Â  Â  Â  Â  Â  Â  console.error("Ã‰chec de la rÃ©cupÃ©ration des informations utilisateur:", error);
Â  Â  Â  Â  Â  Â  if (error.response && error.response.status === 401) {
Â  Â  Â  Â  Â  Â  Â  Â  logout(false);
Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  Â  return false;
Â  Â  Â  Â  }
Â  Â  };

Â  Â  const checkAuthStatus = async () => {
Â  Â  Â  Â  setLoading(true);
Â  Â  Â  Â  const accessToken = localStorage.getItem('accessToken');
Â  Â  Â  Â  const refreshToken = localStorage.getItem('refreshToken');

Â  Â  Â  Â  if (accessToken) {
Â  Â  Â  Â  Â  Â  const userInfoSuccess = await fetchUserInfo();
Â  Â  Â  Â  Â  Â  if (!userInfoSuccess && refreshToken) {
Â  Â  Â  Â  Â  Â  Â  Â  try {
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  const response = await api.post('/api/v1/users/refresh-token', { refreshToken });
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  localStorage.setItem('accessToken', response.data.accessToken);
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  localStorage.setItem('refreshToken', response.data.refreshToken);
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  await fetchUserInfo();
Â  Â  Â  Â  Â  Â  Â  Â  } catch (error) {
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  console.error("Ã‰chec du rafraÃ®chissement des tokens:", error);
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  logout(false);
Â  Â  Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  } else {
Â  Â  Â  Â  Â  Â  // Si pas connectÃ©, tente de trouver le pays par dÃ©faut
Â  Â  Â  Â  Â  Â  await fetchDefaultCountry();
Â  Â  Â  Â  }
Â  Â  Â  Â  setLoading(false);
Â  Â  };

Â  Â  const register = async ({ email, password, firstName, lastName, phoneNumber, country }) => {
Â  Â  Â  Â  setLoading(true);
Â  Â  Â  Â  try {
Â  Â  Â  Â  Â  Â  await api.post('/api/v1/users/register', { email, password, firstName, lastName, phoneNumber, country });
Â  Â  Â  Â  Â  Â  toast.success('Inscription rÃ©ussie !');
Â  Â  Â  Â  Â  Â  toast('Veuillez vÃ©rifier votre email pour confirmer votre compte.', { icon: 'ðŸ“§' });
Â  Â  Â  Â  Â  Â  return true;
Â  Â  Â  Â  } catch (error) {
Â  Â  Â  Â  Â  Â  console.error("Ã‰chec de l'inscription:", error);
Â  Â  Â  Â  Â  Â  toast.error(error.response?.data?.message || 'Ã‰chec de l\'inscription.');
Â  Â  Â  Â  Â  Â  return false;
Â  Â  Â  Â  } finally {
Â  Â  Â  Â  Â  Â  setLoading(false);
Â  Â  Â  Â  }
Â  Â  };

Â  Â  const login = async ({ email, password }) => {
Â  Â  Â  Â  setLoading(true);
Â  Â  Â  Â  try {
Â  Â  Â  Â  Â  Â  const response = await api.post('/api/v1/users/login', { email, password });
Â  Â  Â  Â  Â  Â  const { token, refreshToken } = response.data;
Â  Â  Â  Â  Â  Â  localStorage.setItem('accessToken', token);
Â  Â  Â  Â  Â  Â  localStorage.setItem('refreshToken', refreshToken);
Â  Â  Â  Â  Â  Â  await fetchUserInfo();
Â  Â  Â  Â  Â  Â  toast.success('Connexion rÃ©ussie !');
Â  Â  Â  Â  Â  Â 
Â  Â  Â  Â  } catch (error) {
Â  Â  Â  Â  Â  Â  console.error("Ã‰chec de la connexion:", error);
Â  Â  Â  Â  Â  Â  toast.error(error.response?.data || 'Identifiants invalides.');
Â  Â  Â  Â  Â  Â 
Â  Â  Â  Â  } finally {
Â  Â  Â  Â  Â  Â  setLoading(false);
Â  Â  Â  Â  }
Â  Â  };

Â  Â  const loginAdmin = async ({ email, password }) => {
Â  Â  Â  Â  setLoading(true);
Â  Â  Â  Â  try {
Â  Â  Â  Â  Â  Â  const response = await api.post('/api/v1/users/login-admin', { email, password });
Â  Â  Â  Â  Â  Â  toast.success(response.data || 'Code de confirmation envoyÃ©. Veuillez vÃ©rifier votre email.');
Â  Â  Â  Â  Â  Â  return { success: true, twoFactorRequired: true };
Â  Â  Â  Â  } catch (error) {
Â  Â  Â  Â  Â  Â  console.error("Ã‰chec de la connexion Administrateur:", error);
Â  Â  Â  Â  Â  Â  toast.error(error.response?.data || 'AccÃ¨s refusÃ© ou identifiants invalides.');
Â  Â  Â  Â  Â  Â  return { success: false, twoFactorRequired: false };
Â  Â  Â  Â  } finally {
Â  Â  Â  Â  Â  Â  setLoading(false);
Â  Â  Â  Â  }
Â  Â  };
Â  Â  
Â  Â  const loginAdminConfirmCode = async ({ email, password, code, rememberMe = false }) => {
Â  Â  Â  Â  setLoading(true);
Â  Â  Â  Â  try {
Â  Â  Â  Â  Â  Â  const response = await api.post('/api/v1/users/login-admin-confirm-code', { email, password, code, rememberMe });
Â  Â  Â  Â  Â  Â  const { token, refreshToken } = response.data;
Â  Â  Â  Â  Â  Â  localStorage.setItem('accessToken', token);
Â  Â  Â  Â  Â  Â  localStorage.setItem('refreshToken', refreshToken);
Â  Â  Â  Â  Â  Â  await fetchUserInfo();
Â  Â  Â  Â  Â  Â  toast.success('Code confirmÃ©. Connexion Administrateur rÃ©ussie !');
Â  Â  Â  Â  Â  Â  return true;
Â  Â  Â  Â  } catch (error) {
Â  Â  Â  Â  Â  Â  console.error("Ã‰chec de la confirmation du code Admin:", error);
Â  Â  Â  Â  Â  Â  toast.error(error.response?.data?.message || 'Code invalide ou expirÃ©.');
Â  Â  Â  Â  Â  Â  return false;
Â  Â  Â  Â  } finally {
Â  Â  Â  Â  Â  Â  setLoading(false);
Â  Â  Â  Â  }
Â  Â  };
Â  Â  
Â  Â  const confirmEmail = async (userId, token) => {
Â  Â  Â  Â  setLoading(true);
Â  Â  Â  Â  try {
Â  Â  Â  Â  Â  Â  const response = await api.post(`/api/v1/users/confirm-email/${userId}/${token}`);
Â  Â  Â  Â  Â  Â  toast.success(response.data.message || 'Votre adresse e-mail a Ã©tÃ© confirmÃ©e avec succÃ¨s !');
Â  Â  Â  Â  Â  Â  return true;
Â  Â  Â  Â  } catch (error) {
Â  Â  Â  Â  Â  Â  console.error("Ã‰chec de la confirmation d'e-mail:", error);
Â  Â  Â  Â  Â  Â  toast.error(error.response?.data?.message || 'Le lien est peut-Ãªtre invalide ou a expirÃ©.');
Â  Â  Â  Â  Â  Â  return false;
Â  Â  Â  Â  } finally {
Â  Â  Â  Â  Â  Â  setLoading(false);
Â  Â  Â  Â  }
Â  Â  };

Â  Â  const resendConfirmationEmail = async (email) => {
Â  Â  Â  Â  setLoading(true);
Â  Â  Â  Â  try {
Â  Â  Â  Â  Â  Â  const response = await api.post('/api/v1/users/resend-confirmation-email', { email });
Â  Â  Â  Â  Â  Â  toast.success(response.data.message || 'Un nouvel e-mail de confirmation a Ã©tÃ© envoyÃ©.');
Â  Â  Â  Â  Â  Â  return true;
Â  Â  Â  Â  } catch (error) {
Â  Â  Â  Â  Â  Â  console.error("Ã‰chec du renvoi d'e-mail:", error);
Â  Â  Â  Â  Â  Â  toast.error(error.response?.data?.message || 'Ã‰chec du renvoi. Veuillez vÃ©rifier votre adresse.');
Â  Â  Â  Â  Â  Â  return false;
Â  Â  Â  Â  } finally {
Â  Â  Â  Â  Â  Â  setLoading(false);
Â  Â  Â  Â  }
Â  Â  };

Â  Â  const forgotPassword = async (email) => {
Â  Â  Â  Â  setLoading(true);
Â  Â  Â  Â  try {
Â  Â  Â  Â  Â  Â  const response = await api.post('/api/users/forgot-password', { email });
Â  Â  Â  Â  Â  Â  toast.success(response.data.message || 'Un lien de rÃ©initialisation de mot de passe a Ã©tÃ© envoyÃ©.');
Â  Â  Â  Â  Â  Â  return true;
Â  Â  Â  Â  } catch (error) {
Â  Â  Â  Â  Â  Â  console.error("Ã‰chec de la demande de rÃ©initialisation:", error);
Â  Â  Â  Â  Â  Â  toast.error(error.response?.data?.message || 'Ã‰chec de la demande. Veuillez vÃ©rifier votre adresse e-mail.');
Â  Â  Â  Â  Â  Â  return false;
Â  Â  Â  Â  } finally {
Â  Â  Â  Â  Â  Â  setLoading(false);
Â  Â  Â  Â  }
Â  Â  };

Â  Â  const resetPassword = async (token, newPassword) => {
Â  Â  Â  Â  setLoading(true);
Â  Â  Â  Â  try {
Â  Â  Â  Â  Â  Â  const response = await api.post('/api/users/reset-password', { token, newPassword });
Â  Â  Â  Â  Â  Â  toast.success(response.data.message || 'Votre mot de passe a Ã©tÃ© rÃ©initialisÃ© avec succÃ¨s !');
Â  Â  Â  Â  Â  Â  return true;
Â  Â  Â  Â  } catch (error) {
Â  Â  Â  Â  Â  Â  console.error("Ã‰chec de la rÃ©initialisation du mot de passe:", error);
Â  Â  Â  Â  Â  Â  toast.error(error.response?.data?.message || 'Ã‰chec de la rÃ©initialisation. Le lien est peut-Ãªtre invalide ou a expirÃ©.');
Â  Â  Â  Â  Â  Â  return false;
Â  Â  Â  Â  } finally {
Â  Â  Â  Â  Â  Â  setLoading(false);
Â  Â  Â  Â  }
Â  Â  };

Â  Â  const externalLoginGoogle = async () => {
Â  Â  Â  Â  setLoading(true);
Â  Â  Â  Â  try {
Â  Â  Â  Â  Â  Â  const response = await api.get('/api/users/external-login/google');
Â  Â  Â  Â  Â  Â  if (response.data && response.data.redirectUrl) {
Â  Â  Â  Â  Â  Â  Â  Â  window.location.href = response.data.redirectUrl;
Â  Â  Â  Â  Â  Â  } else {
Â  Â  Â  Â  Â  Â  Â  Â  toast('Redirection vers Google en cours...');
Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  Â  return true;
Â  Â  Â  Â  } catch (error) {
Â  Â  Â  Â  Â  Â  console.error("Ã‰chec de la connexion externe Google:", error);
Â  Â  Â  Â  Â  Â  toast.error(error.response?.data?.message || 'Ã‰chec de la connexion via Google.');
Â  Â  Â  Â  Â  Â  return false;
Â  Â  Â  Â  } finally {
Â  Â  Â  Â  Â  Â  setLoading(false);
Â  Â  Â  Â  }
Â  Â  };

Â  Â  const loginGoogle = async (tokeninfo) => {
Â  Â  Â  Â  setLoading(true);
Â  Â  Â  Â  try {
Â  Â  Â  Â  Â  Â  const response = await api.post('/api/v1/users/login-google', {token:tokeninfo} );
Â  Â  Â  Â  Â  Â  const { token, refreshToken } = response.data;
Â  Â  Â  Â  Â  Â  if (token && refreshToken) {
Â  Â  Â  Â  Â  Â  Â  Â  localStorage.setItem('accessToken', token);
Â  Â  Â  Â  Â  Â  Â  Â  localStorage.setItem('refreshToken', refreshToken);
Â  Â  Â  Â  Â  Â  Â  Â  await fetchUserInfo();
Â  Â  Â  Â  Â  Â  Â  Â  toast.success('Connexion Google rÃ©ussie !');
Â  Â  Â  Â  Â  Â  Â  Â  return true;
Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  } catch (error) {
Â  Â  Â  Â  Â  Â  console.error("Ã‰chec de la connexion/inscription via Google:", error);
Â  Â  Â  Â  Â  Â  toast.error(error.response?.data?.message || 'Ã‰chec de la connexion/inscription via Google.');
Â  Â  Â  Â  Â  Â  return false;
Â  Â  Â  Â  } finally {
Â  Â  Â  Â  Â  Â  setLoading(false);
Â  Â  Â  Â  }
Â  Â  };

Â  Â  const uploadProfilePicture = async (file) => {
Â  Â  Â  Â  setLoading(true);
Â  Â  Â  Â  try {
Â  Â  Â  Â  Â  Â  const formData = new FormData();
Â  Â  Â  Â  Â  Â  formData.append('pictureProfile', file);

Â  Â  Â  Â  Â  Â  const response = await api.post('/api/v1/users/upload', formData, {
Â  Â  Â  Â  Â  Â  Â  Â  headers: {
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  'Content-Type': 'multipart/form-data',
Â  Â  Â  Â  Â  Â  Â  Â  },
Â  Â  Â  Â  Â  Â  });

Â  Â  Â  Â  Â  Â  const newPictureUrl = response.data.pictureProfileUrl;
Â  Â  Â  Â  Â  Â  setUser(prevUser => ({
Â  Â  Â  Â  Â  Â  Â  Â  ...prevUser,
Â  Â  Â  Â  Â  Â  Â  Â  pictureProfileUrl: newPictureUrl
Â  Â  Â  Â  Â  Â  }));

Â  Â  Â  Â  Â  Â  toast.success('Photo de profil mise Ã  jour !');
Â  Â  Â  Â  Â  Â  return true;
Â  Â  Â  Â  } catch (error) {
Â  Â  Â  Â  Â  Â  console.error("Ã‰chec du tÃ©lÃ©chargement de l'image:", error);
Â  Â  Â  Â  Â  Â  toast.error(error.response?.data?.message || "Ã‰chec de l'importation de la photo.");
Â  Â  Â  Â  Â  Â  return false;
Â  Â  Â  Â  } finally {
Â  Â  Â  Â  Â  Â  setLoading(false);
Â  Â  Â  Â  }
Â  Â  };

Â  Â  useEffect(() => {
Â  Â  Â  Â  checkAuthStatus();
Â  Â  }, []);

Â  Â  const value = {
Â  Â  Â  Â  user,
Â  Â  Â  Â  setUser,
Â  Â  Â  Â  loading,
Â  Â  Â  Â  // Pays par dÃ©faut pour les utilisateurs non authentifiÃ©s
Â  Â  Â  Â  defaultCountry, 
Â  Â  Â  Â  fetchDefaultCountry,
Â  Â  Â  Â  // Fonctions d'authentification
Â  Â  Â  Â  fetchUserInfo,
Â  Â  Â  Â  login,
Â  Â  Â  Â  loginAdmin,
Â  Â  Â  Â  loginAdminConfirmCode,
Â  Â  Â  Â  register,
Â  Â  Â  Â  logout,
Â  Â  Â  Â  confirmEmail,
Â  Â  Â  Â  resendConfirmationEmail,
Â  Â  Â  Â  forgotPassword,
Â  Â  Â  Â  resetPassword,
Â  Â  Â  Â  externalLoginGoogle,
Â  Â  Â  Â  loginGoogle,
Â  Â  Â  Â  uploadProfilePicture,
Â  Â  Â  Â  API_URL
Â  Â  };

Â  Â  return (
Â  Â  Â  Â  <authContext.Provider value={value}>
Â  Â  Â  Â  Â  Â <Toaster/>
Â  Â  Â  Â  Â  Â  {children}
Â  Â  Â  Â  </authContext.Provider>
Â  Â  );
}